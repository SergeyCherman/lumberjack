import { TestBed } from '@angular/core/testing';
import {
  lumberjackConfigToken,
  LumberjackLevel,
  LumberjackLogDriver,
  LumberjackLogDriverConfig,
  lumberjackLogDriverToken,
  LumberjackModule,
} from '@ngworker/lumberjack';

import { ConsoleDriver } from '../log-drivers/console.driver';
import { ConsoleDriverConfig } from './console-driver.config';
import { ConsoleDriverModule } from './console-driver.module';

const createConsoleDriver = ({
  config,
  isLumberjackModuleImportedFirst = true,
}: {
  config?: ConsoleDriverConfig;
  isLumberjackModuleImportedFirst?: boolean;
} = {}) => {
  TestBed.configureTestingModule({
    imports: [
      isLumberjackModuleImportedFirst ? LumberjackModule.forRoot() : [],
      ConsoleDriverModule.forRoot(config),
      isLumberjackModuleImportedFirst ? [] : LumberjackModule.forRoot(),
    ],
  });

  const [consoleDriver] = (TestBed.inject(lumberjackLogDriverToken) as unknown) as LumberjackLogDriver[];

  return consoleDriver;
};

describe(ConsoleDriverModule.name, () => {
  it(`cannot be imported without using the ${ConsoleDriverModule.forRoot.name} method`, () => {
    let ngModule: ConsoleDriverModule | undefined;

    TestBed.configureTestingModule({
      imports: [ConsoleDriverModule],
    });

    expect(() => {
      ngModule = TestBed.inject(ConsoleDriverModule);
    }).toThrow();
    expect(ngModule).toBeUndefined();
  });

  describe(ConsoleDriverModule.forRoot.name, () => {
    it('provides the console driver', () => {
      const consoleDriver = createConsoleDriver();

      expect(consoleDriver).toBeInstanceOf(ConsoleDriver);
    });

    it('registers the specified log driver configuration given the specified identifier', () => {
      const expectedConfig: LumberjackLogDriverConfig = {
        levels: [LumberjackLevel.Error],
        identifier: 'ConsoleDriverIdentifier',
      };

      const consoleDriver = createConsoleDriver({ config: expectedConfig });

      const actualConfig = consoleDriver.config;
      expect(actualConfig).toEqual(expectedConfig);
    });

    it('registers the specified log driver configuration given no identifier', () => {
      const config: ConsoleDriverConfig = {
        levels: [LumberjackLevel.Error],
      };
      const expectedConfig: LumberjackLogDriverConfig = {
        ...config,
        identifier: ConsoleDriver.driverIdentifier,
      };

      const consoleDriver = createConsoleDriver({ config });

      const actualConfig = consoleDriver.config;
      expect(actualConfig).toEqual(expectedConfig);
    });

    it('registers a default configuration if none is specified', () => {
      const consoleDriver = createConsoleDriver();

      const actualConfig = consoleDriver.config;
      const logConfig = TestBed.inject(lumberjackConfigToken);
      const defaultLogDriverConfig: LumberjackLogDriverConfig = {
        levels: logConfig.levels,
        identifier: ConsoleDriver.driverIdentifier,
      };
      expect(actualConfig).toEqual(defaultLogDriverConfig);
    });

    it('registers the specified log driver configuration when the Lumberjack module is imported after the console driver module', () => {
      const expectedConfig: LumberjackLogDriverConfig = {
        levels: [LumberjackLevel.Debug],
        identifier: 'ConsoleDriver',
      };

      const consoleDriver = createConsoleDriver({
        config: expectedConfig,
        isLumberjackModuleImportedFirst: false,
      });

      const actualConfig = consoleDriver.config;
      expect(actualConfig).toEqual(expectedConfig);
    });
  });
});
